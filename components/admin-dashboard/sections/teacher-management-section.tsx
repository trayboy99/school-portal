"use client"

import type React from "react"

import { useState, useEffect } from "react"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table"
import { Badge } from "@/components/ui/badge"
import { Checkbox } from "@/components/ui/checkbox"
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
  DialogClose,
} from "@/components/ui/dialog"
import { useToast } from "@/hooks/use-toast"
import { Plus, Edit, Trash2, Users, Search, Eye, Calendar, Phone, Mail, MapPin, AlertTriangle, X } from "lucide-react"
import { Avatar, AvatarFallback } from "@/components/ui/avatar"
import { Textarea } from "@/components/ui/textarea"

interface Teacher {
  id: string
  employee_id: string
  username: string
  password: string
  first_name: string
  middle_name: string
  surname: string
  email: string
  department: string
  subjects: string[]
  phone: string
  address: string
  hire_date: string
  status: string
  created_at: string
  updated_at: string
  // Additional fields from UI
  photo?: string
  date_of_birth?: string
  gender?: string
  qualification?: string
  experience?: string
  employment_type?: string
  salary?: string
  emergency_contact?: string
  emergency_phone?: string
}

interface Subject {
  id: number
  subject_name: string
  subject_code: string
  department: string
}

interface Department {
  id: string
  name: string
  code: string
  status: string
}

export function TeacherManagementSection() {
  const [teachers, setTeachers] = useState<Teacher[]>([])
  const [subjects, setSubjects] = useState<Subject[]>([])
  const [departments, setDepartments] = useState<Department[]>([])
  const [filteredTeachers, setFilteredTeachers] = useState<Teacher[]>([])
  const [loading, setLoading] = useState(true)
  const [submitting, setSubmitting] = useState(false)
  const [dialogOpen, setDialogOpen] = useState(false)
  const [viewDialogOpen, setViewDialogOpen] = useState(false)
  const [editingTeacher, setEditingTeacher] = useState<Teacher | null>(null)
  const [viewingTeacher, setViewingTeacher] = useState<Teacher | null>(null)
  const [searchTerm, setSearchTerm] = useState("")
  const [departmentFilter, setDepartmentFilter] = useState("all")
  const [statusFilter, setStatusFilter] = useState("all")
  const [formData, setFormData] = useState({
    username: "",
    password: "",
    first_name: "",
    middle_name: "",
    surname: "",
    email: "",
    department: "",
    subjects: [] as number[],
    phone: "",
    address: "",
    hire_date: "",
    status: "active",
    // Additional fields from UI
    photo: "",
    date_of_birth: "",
    gender: "",
    qualification: "",
    experience: "",
    employment_type: "",
    salary: "",
    emergency_contact: "",
    emergency_phone: "",
  })
  const { toast } = useToast()

  const employmentTypes = ["Full-time", "Part-time", "Contract", "Temporary"]
  const genders = ["Male", "Female"]
  // Use exact database values for status
  const statuses = ["active", "inactive", "suspended"]
  const credentialMethods = ["Auto-generate credentials", "Set custom credentials"]
  const credentialDeliveryOptions = [
    "Teacher (via email)",
    "Teacher (in person)",
    "Department Head",
    "Admin only (save in system)",
  ]

  const [credentialOption, setCredentialOption] = useState<string>("Auto-generate credentials")
  const [credentialDelivery, setCredentialDelivery] = useState<string>("Teacher (via email)")
  const [selectedFile, setSelectedFile] = useState<File | null>(null)
  const [filePreview, setFilePreview] = useState<string | null>(null)
  const [autoGeneratedUsername, setAutoGeneratedUsername] = useState<string>("")

  // Helper function to format status for display
  const formatStatusForDisplay = (status: string) => {
    return status.charAt(0).toUpperCase() + status.slice(1)
  }

  // Helper function to get badge variant for status
  const getStatusBadgeVariant = (status: string) => {
    switch (status.toLowerCase()) {
      case "active":
        return "default"
      case "suspended":
        return "destructive"
      case "inactive":
        return "secondary"
      default:
        return "secondary"
    }
  }

  const fetchTeachers = async () => {
    try {
      const response = await fetch("/api/admin/teachers")
      if (response.ok) {
        const data = await response.json()
        setTeachers(data)
        setFilteredTeachers(data)
      } else {
        throw new Error("Failed to fetch teachers")
      }
    } catch (error) {
      console.error("Error fetching teachers:", error)
      toast({
        title: "Error",
        description: "Failed to fetch teachers",
        variant: "destructive",
      })
    }
  }

  const fetchSubjects = async () => {
    try {
      const response = await fetch("/api/admin/subjects")
      if (response.ok) {
        const data = await response.json()
        setSubjects(data)
      } else {
        throw new Error("Failed to fetch subjects")
      }
    } catch (error) {
      console.error("Error fetching subjects:", error)
      toast({
        title: "Error",
        description: "Failed to fetch subjects",
        variant: "destructive",
      })
    }
  }

  const fetchDepartments = async () => {
    try {
      const response = await fetch("/api/admin/departments")
      if (response.ok) {
        const data = await response.json()
        // Filter only active departments
        const activeDepartments = data.filter((dept: Department) => dept.status === "Active")
        setDepartments(activeDepartments)
      } else {
        throw new Error("Failed to fetch departments")
      }
    } catch (error) {
      console.error("Error fetching departments:", error)
      toast({
        title: "Error",
        description: "Failed to fetch departments",
        variant: "destructive",
      })
    }
  }

  const validateForm = () => {
    if (!formData.first_name.trim()) {
      toast({
        title: "Validation Error",
        description: "First name is required",
        variant: "destructive",
      })
      return false
    }

    if (!formData.surname.trim()) {
      toast({
        title: "Validation Error",
        description: "Surname is required",
        variant: "destructive",
      })
      return false
    }

    if (credentialOption === "Set custom credentials") {
      if (!formData.username.trim()) {
        toast({
          title: "Validation Error",
          description: "Username is required when setting custom credentials",
          variant: "destructive",
        })
        return false
      }

      if (!formData.password.trim()) {
        toast({
          title: "Validation Error",
          description: "Password is required when setting custom credentials",
          variant: "destructive",
        })
        return false
      }
    }

    return true
  }

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()

    // Validate form before submission
    if (!validateForm()) {
      return
    }

    setSubmitting(true)

    try {
      // Prepare data for submission - only include fields that exist in the database table
      const submitData = {
        username: formData.username,
        password: formData.password,
        first_name: formData.first_name,
        middle_name: formData.middle_name,
        surname: formData.surname,
        email: formData.email,
        department: formData.department,
        subjects: formData.subjects, // Now properly handled as array of subject IDs
        phone: formData.phone,
        address: formData.address,
        hire_date: formData.hire_date,
        status: formData.status, // This should be one of: active, inactive, suspended
        date_of_birth: formData.date_of_birth,
        gender: formData.gender,
        qualification: formData.qualification,
        experience: formData.experience,
        employment_type: formData.employment_type,
        salary: formData.salary,
        emergency_contact: formData.emergency_contact,
        emergency_phone: formData.emergency_phone,
      }

      // Handle credential generation
      if (credentialOption === "Auto-generate credentials") {
        if (formData.first_name && formData.surname) {
          submitData.username = `${formData.first_name.toLowerCase()}.${formData.surname.toLowerCase()}`
        }
        submitData.password = "teacher123"
      }

      console.log("Submitting teacher data:", submitData)

      const url = editingTeacher ? `/api/admin/teachers/${editingTeacher.id}` : "/api/admin/teachers"
      const method = editingTeacher ? "PUT" : "POST"

      const response = await fetch(url, {
        method,
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify(submitData),
      })

      const responseData = await response.json()

      if (response.ok) {
        toast({
          title: "Success",
          description: `Teacher ${editingTeacher ? "updated" : "created"} successfully`,
        })
        setDialogOpen(false)
        setEditingTeacher(null)
        resetForm()
        fetchTeachers()
      } else {
        console.error("Server error:", responseData)
        throw new Error(responseData.error || "Failed to save teacher")
      }
    } catch (error) {
      console.error("Error saving teacher:", error)
      toast({
        title: "Error",
        description: error instanceof Error ? error.message : "Failed to save teacher",
        variant: "destructive",
      })
    } finally {
      setSubmitting(false)
    }
  }

  const handleEdit = (teacher: Teacher) => {
    setEditingTeacher(teacher)
    setFormData({
      username: teacher.username || "",
      password: teacher.password || "",
      first_name: teacher.first_name || "",
      middle_name: teacher.middle_name || "",
      surname: teacher.surname || "",
      email: teacher.email || "",
      department: teacher.department || "",
      subjects: Array.isArray(teacher.subjects) ? teacher.subjects.map(Number) : [],
      phone: teacher.phone || "",
      address: teacher.address || "",
      hire_date: teacher.hire_date || "",
      status: teacher.status || "active",
      photo: teacher.photo || "",
      date_of_birth: teacher.date_of_birth || "",
      gender: teacher.gender || "",
      qualification: teacher.qualification || "",
      experience: teacher.experience || "",
      employment_type: teacher.employment_type || "",
      salary: teacher.salary || "",
      emergency_contact: teacher.emergency_contact || "",
      emergency_phone: teacher.emergency_phone || "",
    })
    setCredentialOption(teacher.username ? "Set custom credentials" : "Auto-generate credentials")
    setDialogOpen(true)
  }

  const handleView = (teacher: Teacher) => {
    setViewingTeacher(teacher)
    setViewDialogOpen(true)
  }

  const handleDelete = async (teacherId: string) => {
    if (!confirm("Are you sure you want to delete this teacher?")) return

    try {
      const response = await fetch(`/api/admin/teachers/${teacherId}`, {
        method: "DELETE",
      })

      if (response.ok) {
        toast({
          title: "Success",
          description: "Teacher deleted successfully",
        })
        fetchTeachers()
      } else {
        throw new Error("Failed to delete teacher")
      }
    } catch (error) {
      console.error("Error deleting teacher:", error)
      toast({
        title: "Error",
        description: "Failed to delete teacher",
        variant: "destructive",
      })
    }
  }

  const resetForm = () => {
    setFormData({
      username: "",
      password: "",
      first_name: "",
      middle_name: "",
      surname: "",
      email: "",
      department: "",
      subjects: [],
      phone: "",
      address: "",
      hire_date: "",
      status: "active",
      photo: "",
      date_of_birth: "",
      gender: "",
      qualification: "",
      experience: "",
      employment_type: "",
      salary: "",
      emergency_contact: "",
      emergency_phone: "",
    })
    setCredentialOption("Auto-generate credentials")
    setCredentialDelivery("Teacher (via email)")
    setSelectedFile(null)
    setFilePreview(null)
    setAutoGeneratedUsername("")
  }

  const filterTeachers = () => {
    let filtered = teachers

    if (searchTerm) {
      filtered = filtered.filter(
        (teacher) =>
          teacher.first_name?.toLowerCase().includes(searchTerm.toLowerCase()) ||
          teacher.surname?.toLowerCase().includes(searchTerm.toLowerCase()) ||
          teacher.username?.toLowerCase().includes(searchTerm.toLowerCase()) ||
          teacher.email?.toLowerCase().includes(searchTerm.toLowerCase()) ||
          teacher.employee_id?.toLowerCase().includes(searchTerm.toLowerCase()),
      )
    }

    if (departmentFilter !== "all") {
      filtered = filtered.filter((teacher) => teacher.department === departmentFilter)
    }

    if (statusFilter !== "all") {
      filtered = filtered.filter((teacher) => teacher.status === statusFilter)
    }

    setFilteredTeachers(filtered)
  }

  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    if (e.target.files && e.target.files[0]) {
      const file = e.target.files[0]
      setSelectedFile(file)

      // Create preview
      const reader = new FileReader()
      reader.onloadend = () => {
        setFilePreview(reader.result as string)
      }
      reader.readAsDataURL(file)
    }
  }

  const parseSubjects = (subjects: string[] | string): string[] => {
    if (Array.isArray(subjects)) return subjects
    if (typeof subjects === "string") {
      try {
        return JSON.parse(subjects)
      } catch {
        return []
      }
    }
    return []
  }

  const formatDate = (dateString: string): string => {
    if (!dateString) return "Not specified"
    try {
      return new Date(dateString).toLocaleDateString()
    } catch {
      return dateString
    }
  }

  const getSubjectNames = (subjectIds: number[]): string[] => {
    return subjectIds.map((id) => {
      const subject = subjects.find((s) => s.id === id)
      return subject ? subject.subject_name : `Subject ${id}`
    })
  }

  const handleSubjectToggle = (subjectId: number, checked: boolean) => {
    setFormData((prev) => ({
      ...prev,
      subjects: checked ? [...prev.subjects, subjectId] : prev.subjects.filter((id) => id !== subjectId),
    }))
  }

  const getFilteredSubjects = () => {
    if (!formData.department) return subjects
    return subjects.filter((subject) => subject.department === formData.department)
  }

  useEffect(() => {
    const fetchData = async () => {
      setLoading(true)
      await Promise.all([fetchTeachers(), fetchSubjects(), fetchDepartments()])
      setLoading(false)
    }
    fetchData()
  }, [])

  useEffect(() => {
    filterTeachers()
  }, [searchTerm, departmentFilter, statusFilter, teachers])

  useEffect(() => {
    if (formData.first_name && formData.surname) {
      const generatedUsername = `${formData.first_name.toLowerCase()}.${formData.surname.toLowerCase()}`
      setAutoGeneratedUsername(generatedUsername)
    } else {
      setAutoGeneratedUsername("")
    }
  }, [formData.first_name, formData.surname])

  if (loading) {
    return (
      <div className="flex items-center justify-center py-12">
        <div className="text-center">
          <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mx-auto mb-4"></div>
          <p className="text-gray-600">Loading teachers...</p>
        </div>
      </div>
    )
  }

  return (
    <div className="space-y-6">
      <Card>
        <CardHeader>
          <div className="flex items-center justify-between">
            <div>
              <CardTitle className="flex items-center gap-2">
                <Users className="h-5 w-5" />
                Teacher Management
              </CardTitle>
              <CardDescription>Manage teacher accounts and information ({teachers.length} teachers)</CardDescription>
            </div>
            <Dialog open={dialogOpen} onOpenChange={setDialogOpen}>
              <DialogTrigger asChild>
                <Button onClick={resetForm}>
                  <Plus className="h-4 w-4 mr-2" />
                  Add Teacher
                </Button>
              </DialogTrigger>
              <DialogContent className="max-w-4xl max-h-[90vh] overflow-y-auto">
                <DialogHeader>
                  <div className="flex items-center justify-between">
                    <div>
                      <DialogTitle>Add New Teacher</DialogTitle>
                      <DialogDescription>
                        Enter the teacher's information to create a new staff record.
                      </DialogDescription>
                    </div>
                    <DialogClose asChild>
                      <Button variant="ghost" size="icon" className="h-6 w-6">
                        <X className="h-4 w-4" />
                      </Button>
                    </DialogClose>
                  </div>
                </DialogHeader>
                <form onSubmit={handleSubmit} className="space-y-6">
                  {/* Personal Information */}
                  <div className="space-y-4">
                    <h3 className="text-lg font-medium border-b pb-2">Personal Information</h3>

                    {/* Teacher Photo */}
                    <div className="space-y-2">
                      <Label htmlFor="photo">Teacher Photo</Label>
                      <div className="flex items-center gap-4">
                        <div className="w-20 h-20 rounded-full border-2 border-dashed border-gray-300 flex items-center justify-center overflow-hidden">
                          {filePreview ? (
                            <img
                              src={filePreview || "/placeholder.svg"}
                              alt="Preview"
                              className="w-full h-full object-cover"
                            />
                          ) : (
                            <div className="text-gray-400 text-center">
                              <Users className="h-8 w-8 mx-auto" />
                              <span className="text-xs">Photo</span>
                            </div>
                          )}
                        </div>
                        <div className="flex-1">
                          <Input
                            id="photo"
                            type="file"
                            accept="image/jpeg,image/png"
                            onChange={handleFileChange}
                            className="mb-1"
                          />
                          <p className="text-xs text-gray-500">Upload a professional photo (JPG, PNG, max 2MB)</p>
                        </div>
                      </div>
                    </div>

                    {/* Name Fields */}
                    <div className="grid gap-4 md:grid-cols-3">
                      <div className="space-y-2">
                        <Label htmlFor="first_name">First Name *</Label>
                        <Input
                          id="first_name"
                          placeholder="Enter first name"
                          value={formData.first_name}
                          onChange={(e) => setFormData((prev) => ({ ...prev, first_name: e.target.value }))}
                          required
                        />
                      </div>
                      <div className="space-y-2">
                        <Label htmlFor="middle_name">Middle Name</Label>
                        <Input
                          id="middle_name"
                          placeholder="Enter middle name (optional)"
                          value={formData.middle_name}
                          onChange={(e) => setFormData((prev) => ({ ...prev, middle_name: e.target.value }))}
                        />
                      </div>
                      <div className="space-y-2">
                        <Label htmlFor="surname">Surname *</Label>
                        <Input
                          id="surname"
                          placeholder="Enter surname"
                          value={formData.surname}
                          onChange={(e) => setFormData((prev) => ({ ...prev, surname: e.target.value }))}
                          required
                        />
                      </div>
                    </div>

                    {/* Contact Fields */}
                    <div className="grid gap-4 md:grid-cols-2">
                      <div className="space-y-2">
                        <Label htmlFor="email">Email Address *</Label>
                        <Input
                          id="email"
                          type="email"
                          placeholder="teacher@westminster.edu"
                          value={formData.email}
                          onChange={(e) => setFormData((prev) => ({ ...prev, email: e.target.value }))}
                          required
                        />
                      </div>
                      <div className="space-y-2">
                        <Label htmlFor="phone">Phone Number *</Label>
                        <Input
                          id="phone"
                          placeholder="+234 xxx xxx xxxx"
                          value={formData.phone}
                          onChange={(e) => setFormData((prev) => ({ ...prev, phone: e.target.value }))}
                          required
                        />
                      </div>
                    </div>

                    {/* Date of Birth & Gender */}
                    <div className="grid gap-4 md:grid-cols-2">
                      <div className="space-y-2">
                        <Label htmlFor="date_of_birth">Date of Birth</Label>
                        <Input
                          id="date_of_birth"
                          type="date"
                          placeholder="mm/dd/yyyy"
                          value={formData.date_of_birth}
                          onChange={(e) => setFormData((prev) => ({ ...prev, date_of_birth: e.target.value }))}
                        />
                      </div>
                      <div className="space-y-2">
                        <Label htmlFor="gender">Gender</Label>
                        <Select
                          value={formData.gender}
                          onValueChange={(value) => setFormData((prev) => ({ ...prev, gender: value }))}
                        >
                          <SelectTrigger>
                            <SelectValue placeholder="Select gender" />
                          </SelectTrigger>
                          <SelectContent>
                            {genders.map((gender) => (
                              <SelectItem key={gender} value={gender}>
                                {gender}
                              </SelectItem>
                            ))}
                          </SelectContent>
                        </Select>
                      </div>
                    </div>

                    {/* Home Address */}
                    <div className="space-y-2">
                      <Label htmlFor="address">Home Address</Label>
                      <Textarea
                        id="address"
                        placeholder="Enter full home address"
                        value={formData.address}
                        onChange={(e) => setFormData((prev) => ({ ...prev, address: e.target.value }))}
                        rows={3}
                      />
                    </div>
                  </div>

                  {/* Professional Information */}
                  <div className="space-y-4">
                    <h3 className="text-lg font-medium border-b pb-2">Professional Information</h3>

                    <div className="grid gap-4 md:grid-cols-2">
                      <div className="space-y-2">
                        <Label htmlFor="qualification">Highest Qualification *</Label>
                        <Input
                          id="qualification"
                          placeholder="e.g., MSc in Mathematics"
                          value={formData.qualification}
                          onChange={(e) => setFormData((prev) => ({ ...prev, qualification: e.target.value }))}
                          required
                        />
                      </div>
                      <div className="space-y-2">
                        <Label htmlFor="experience">Years of Experience *</Label>
                        <Input
                          id="experience"
                          placeholder="e.g., 5 years"
                          value={formData.experience}
                          onChange={(e) => setFormData((prev) => ({ ...prev, experience: e.target.value }))}
                          required
                        />
                      </div>
                    </div>

                    <div className="space-y-2">
                      <Label htmlFor="department">Department *</Label>
                      <Select
                        value={formData.department}
                        onValueChange={(value) => setFormData((prev) => ({ ...prev, department: value, subjects: [] }))}
                        required
                      >
                        <SelectTrigger>
                          <SelectValue placeholder="Select department" />
                        </SelectTrigger>
                        <SelectContent>
                          {departments.map((dept) => (
                            <SelectItem key={dept.id} value={dept.name}>
                              {dept.name}
                            </SelectItem>
                          ))}
                        </SelectContent>
                      </Select>
                    </div>

                    {/* Subject Assignment */}
                    {formData.department && (
                      <div className="space-y-2">
                        <Label>Subjects to Teach</Label>
                        <div className="border rounded-lg p-4 max-h-48 overflow-y-auto">
                          <div className="grid gap-3 md:grid-cols-2">
                            {getFilteredSubjects().map((subject) => (
                              <div key={subject.id} className="flex items-center space-x-2">
                                <Checkbox
                                  id={`subject-${subject.id}`}
                                  checked={formData.subjects.includes(subject.id)}
                                  onCheckedChange={(checked) => handleSubjectToggle(subject.id, checked as boolean)}
                                />
                                <Label htmlFor={`subject-${subject.id}`} className="text-sm font-normal">
                                  {subject.subject_name} ({subject.subject_code})
                                </Label>
                              </div>
                            ))}
                          </div>
                          {getFilteredSubjects().length === 0 && (
                            <p className="text-sm text-gray-500 text-center py-4">
                              No subjects available for this department
                            </p>
                          )}
                        </div>
                        <p className="text-xs text-gray-500">
                          Select the subjects this teacher will be responsible for teaching
                        </p>
                      </div>
                    )}
                  </div>

                  {/* Employment Information */}
                  <div className="space-y-4">
                    <h3 className="text-lg font-medium border-b pb-2">Employment Information</h3>

                    <div className="grid gap-4 md:grid-cols-3">
                      <div className="space-y-2">
                        <Label htmlFor="employment_type">Employment Type *</Label>
                        <Select
                          value={formData.employment_type}
                          onValueChange={(value) => setFormData((prev) => ({ ...prev, employment_type: value }))}
                          required
                        >
                          <SelectTrigger>
                            <SelectValue placeholder="Select employment type" />
                          </SelectTrigger>
                          <SelectContent>
                            {employmentTypes.map((type) => (
                              <SelectItem key={type} value={type}>
                                {type}
                              </SelectItem>
                            ))}
                          </SelectContent>
                        </Select>
                      </div>
                      <div className="space-y-2">
                        <Label htmlFor="hire_date">Hire Date *</Label>
                        <Input
                          id="hire_date"
                          type="date"
                          placeholder="mm/dd/yyyy"
                          value={formData.hire_date}
                          onChange={(e) => setFormData((prev) => ({ ...prev, hire_date: e.target.value }))}
                          required
                        />
                      </div>
                      <div className="space-y-2">
                        <Label htmlFor="status">Status *</Label>
                        <Select
                          value={formData.status}
                          onValueChange={(value) => setFormData((prev) => ({ ...prev, status: value }))}
                          required
                        >
                          <SelectTrigger>
                            <SelectValue placeholder="Select status" />
                          </SelectTrigger>
                          <SelectContent>
                            {statuses.map((status) => (
                              <SelectItem key={status} value={status}>
                                {formatStatusForDisplay(status)}
                              </SelectItem>
                            ))}
                          </SelectContent>
                        </Select>
                      </div>
                    </div>

                    <div className="space-y-2">
                      <Label htmlFor="salary">Monthly Salary</Label>
                      <Input
                        id="salary"
                        placeholder="₦450,000"
                        value={formData.salary}
                        onChange={(e) => setFormData((prev) => ({ ...prev, salary: e.target.value }))}
                      />
                    </div>
                  </div>

                  {/* Emergency Contact */}
                  <div className="space-y-4">
                    <h3 className="text-lg font-medium border-b pb-2">Emergency Contact</h3>

                    <div className="grid gap-4 md:grid-cols-2">
                      <div className="space-y-2">
                        <Label htmlFor="emergency_contact">Emergency Contact Name</Label>
                        <Input
                          id="emergency_contact"
                          placeholder="Emergency contact name"
                          value={formData.emergency_contact}
                          onChange={(e) => setFormData((prev) => ({ ...prev, emergency_contact: e.target.value }))}
                        />
                      </div>
                      <div className="space-y-2">
                        <Label htmlFor="emergency_phone">Emergency Phone</Label>
                        <Input
                          id="emergency_phone"
                          placeholder="+234 xxx xxx xxxx"
                          value={formData.emergency_phone}
                          onChange={(e) => setFormData((prev) => ({ ...prev, emergency_phone: e.target.value }))}
                        />
                      </div>
                    </div>
                  </div>

                  {/* Login Credentials */}
                  <div className="space-y-4">
                    <h3 className="text-lg font-medium border-b pb-2">Login Credentials</h3>

                    <div className="space-y-2">
                      <Label htmlFor="credential_method">Credential Setup Method *</Label>
                      <Select value={credentialOption} onValueChange={setCredentialOption} required>
                        <SelectTrigger>
                          <SelectValue />
                        </SelectTrigger>
                        <SelectContent>
                          {credentialMethods.map((method) => (
                            <SelectItem key={method} value={method}>
                              {method}
                            </SelectItem>
                          ))}
                        </SelectContent>
                      </Select>
                    </div>

                    {credentialOption === "Auto-generate credentials" && (
                      <div className="p-4 bg-green-50 border border-green-200 rounded-lg">
                        <div className="space-y-2">
                          <p className="text-sm text-green-800 font-medium">
                            <strong>Auto-Generated Credentials:</strong>
                          </p>
                          <div className="grid gap-2 md:grid-cols-2">
                            <div>
                              <Label className="text-xs text-green-700">Username:</Label>
                              <p className="font-mono text-sm bg-green-100 px-2 py-1 rounded border">
                                {autoGeneratedUsername || "firstname.surname"}
                              </p>
                            </div>
                            <div>
                              <Label className="text-xs text-green-700">Password:</Label>
                              <p className="font-mono text-sm bg-green-100 px-2 py-1 rounded border">teacher123</p>
                            </div>
                          </div>
                          <p className="text-xs text-green-700 mt-2">
                            Username will be automatically created from first name and surname (e.g., john.smith)
                          </p>
                        </div>
                      </div>
                    )}

                    {credentialOption === "Set custom credentials" && (
                      <>
                        <div className="bg-amber-50 border border-amber-200 p-3 rounded-md flex items-start gap-2">
                          <AlertTriangle className="h-5 w-5 text-amber-500 mt-0.5 flex-shrink-0" />
                          <p className="text-sm text-amber-800">
                            Setting custom credentials requires you to securely share them with the teacher.
                          </p>
                        </div>

                        <div className="grid gap-4 md:grid-cols-2">
                          <div className="space-y-2">
                            <Label htmlFor="username">Username *</Label>
                            <Input
                              id="username"
                              placeholder="e.g., john.smith or teacher001"
                              value={formData.username}
                              onChange={(e) => setFormData((prev) => ({ ...prev, username: e.target.value }))}
                              required={credentialOption === "Set custom credentials"}
                            />
                            <p className="text-xs text-gray-500">
                              Recommended format: firstname.lastname (e.g., john.smith)
                            </p>
                          </div>
                          <div className="space-y-2">
                            <Label htmlFor="password">Temporary Password *</Label>
                            <Input
                              id="password"
                              type="password"
                              placeholder="Enter secure temporary password"
                              value={formData.password}
                              onChange={(e) => setFormData((prev) => ({ ...prev, password: e.target.value }))}
                              required={credentialOption === "Set custom credentials"}
                            />
                            <p className="text-xs text-gray-500">
                              Teacher will be required to change this on first login
                            </p>
                          </div>
                        </div>
                      </>
                    )}

                    <div className="space-y-2">
                      <Label htmlFor="credential_delivery">Send Credentials To</Label>
                      <Select value={credentialDelivery} onValueChange={setCredentialDelivery}>
                        <SelectTrigger>
                          <SelectValue />
                        </SelectTrigger>
                        <SelectContent>
                          {credentialDeliveryOptions.map((option) => (
                            <SelectItem key={option} value={option}>
                              {option}
                            </SelectItem>
                          ))}
                        </SelectContent>
                      </Select>
                    </div>
                  </div>

                  <div className="flex justify-end gap-2 pt-4">
                    <DialogClose asChild>
                      <Button type="button" variant="outline" disabled={submitting}>
                        Cancel
                      </Button>
                    </DialogClose>
                    <Button type="submit" disabled={submitting}>
                      {submitting ? (
                        <>
                          <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2"></div>
                          Creating...
                        </>
                      ) : (
                        "Add Teacher"
                      )}
                    </Button>
                  </div>
                </form>
              </DialogContent>
            </Dialog>
          </div>
        </CardHeader>
        <CardContent>
          {/* Filters */}
          <div className="flex gap-4 mb-6 flex-wrap">
            <div className="flex-1 min-w-64 relative">
              <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400" />
              <Input
                placeholder="Search teachers by name, ID, email..."
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
                className="pl-10"
              />
            </div>
            <Select value={departmentFilter} onValueChange={setDepartmentFilter}>
              <SelectTrigger className="w-48">
                <SelectValue placeholder="All Departments" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="all">All Departments</SelectItem>
                {departments.map((dept) => (
                  <SelectItem key={dept.id} value={dept.name}>
                    {dept.name}
                  </SelectItem>
                ))}
              </SelectContent>
            </Select>
            <Select value={statusFilter} onValueChange={setStatusFilter}>
              <SelectTrigger className="w-32">
                <SelectValue placeholder="All Status" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="all">All Status</SelectItem>
                {statuses.map((status) => (
                  <SelectItem key={status} value={status}>
                    {formatStatusForDisplay(status)}
                  </SelectItem>
                ))}
              </SelectContent>
            </Select>
          </div>

          {/* Teachers Table */}
          <div className="overflow-x-auto">
            <Table>
              <TableHeader>
                <TableRow>
                  <TableHead>Teacher</TableHead>
                  <TableHead>Employee ID</TableHead>
                  <TableHead>Username</TableHead>
                  <TableHead>Department</TableHead>
                  <TableHead>Subjects</TableHead>
                  <TableHead>Experience</TableHead>
                  <TableHead>Status</TableHead>
                  <TableHead>Actions</TableHead>
                </TableRow>
              </TableHeader>
              <TableBody>
                {filteredTeachers.map((teacher) => (
                  <TableRow key={teacher.id}>
                    <TableCell>
                      <div className="flex items-center gap-3">
                        <Avatar className="h-10 w-10 bg-blue-600">
                          <AvatarFallback className="bg-blue-600 text-white text-sm font-medium">
                            {teacher.first_name?.charAt(0)?.toUpperCase() || teacher.username?.charAt(0)?.toUpperCase()}
                            {teacher.surname?.charAt(0)?.toUpperCase() || ""}
                          </AvatarFallback>
                        </Avatar>
                        <div>
                          <p className="font-medium">
                            {`${teacher.first_name || ""} ${teacher.middle_name || ""} ${teacher.surname || ""}`.trim() ||
                              teacher.username}
                          </p>
                          <p className="text-sm text-gray-600">{teacher.email}</p>
                          <p className="text-xs text-gray-500">@{teacher.username}</p>
                        </div>
                      </div>
                    </TableCell>
                    <TableCell>
                      <span className="font-mono text-sm bg-blue-100 px-2 py-1 rounded">{teacher.employee_id}</span>
                    </TableCell>
                    <TableCell>
                      <span className="font-mono text-sm bg-gray-100 px-2 py-1 rounded">{teacher.username}</span>
                    </TableCell>
                    <TableCell>
                      <Badge variant="outline">{teacher.department}</Badge>
                    </TableCell>
                    <TableCell>
                      <div className="flex flex-wrap gap-1">
                        {getSubjectNames(Array.isArray(teacher.subjects) ? teacher.subjects.map(Number) : [])
                          .slice(0, 2)
                          .map((subjectName, index) => (
                            <Badge key={index} variant="secondary" className="text-xs">
                              {subjectName}
                            </Badge>
                          ))}
                        {getSubjectNames(Array.isArray(teacher.subjects) ? teacher.subjects.map(Number) : []).length >
                          2 && (
                          <Badge variant="secondary" className="text-xs">
                            +
                            {getSubjectNames(Array.isArray(teacher.subjects) ? teacher.subjects.map(Number) : [])
                              .length - 2}
                          </Badge>
                        )}
                      </div>
                    </TableCell>
                    <TableCell className="text-sm">{teacher.experience}</TableCell>
                    <TableCell>
                      <Badge variant={getStatusBadgeVariant(teacher.status)}>
                        {formatStatusForDisplay(teacher.status)}
                      </Badge>
                    </TableCell>
                    <TableCell>
                      <div className="flex gap-1">
                        <Button size="sm" variant="outline" onClick={() => handleView(teacher)}>
                          <Eye className="h-3 w-3" />
                        </Button>
                        <Button size="sm" variant="outline" onClick={() => handleEdit(teacher)}>
                          <Edit className="h-3 w-3" />
                        </Button>
                        <Button size="sm" variant="outline" onClick={() => handleDelete(teacher.id)}>
                          <Trash2 className="h-3 w-3" />
                        </Button>
                      </div>
                    </TableCell>
                  </TableRow>
                ))}
              </TableBody>
            </Table>
          </div>

          {filteredTeachers.length === 0 && (
            <div className="text-center py-12">
              <Users className="h-12 w-12 text-gray-400 mx-auto mb-4" />
              <h3 className="text-lg font-medium text-gray-900 mb-2">No teachers found</h3>
              <p className="text-gray-600">
                {searchTerm || departmentFilter !== "all" || statusFilter !== "all"
                  ? "Try adjusting your search filters"
                  : "Get started by adding your first teacher"}
              </p>
            </div>
          )}
        </CardContent>
      </Card>

      {/* View Teacher Dialog */}
      <Dialog open={viewDialogOpen} onOpenChange={setViewDialogOpen}>
        <DialogContent className="max-w-4xl max-h-[90vh] overflow-y-auto">
          <DialogHeader>
            <DialogTitle>Teacher Profile</DialogTitle>
            <DialogDescription>Complete information about the teacher</DialogDescription>
          </DialogHeader>
          {viewingTeacher && (
            <div className="space-y-6">
              {/* Header */}
              <div className="flex items-start gap-6 p-6 bg-gradient-to-r from-blue-50 to-indigo-50 rounded-lg">
                <Avatar className="h-20 w-20 bg-blue-600">
                  <AvatarFallback className="bg-blue-600 text-white text-xl font-bold">
                    {viewingTeacher.first_name?.charAt(0)?.toUpperCase() ||
                      viewingTeacher.username?.charAt(0)?.toUpperCase()}
                    {viewingTeacher.surname?.charAt(0)?.toUpperCase() || ""}
                  </AvatarFallback>
                </Avatar>
                <div className="flex-1">
                  <h2 className="text-2xl font-bold text-gray-900">
                    {`${viewingTeacher.first_name || ""} ${viewingTeacher.middle_name || ""} ${
                      viewingTeacher.surname || ""
                    }`.trim() || viewingTeacher.username}
                  </h2>
                  <p className="text-lg text-gray-600 mb-2">{viewingTeacher.qualification}</p>
                  <div className="flex items-center gap-4 text-sm text-gray-600">
                    <span className="flex items-center gap-1">
                      <Badge variant="outline">{viewingTeacher.employee_id}</Badge>
                    </span>
                    <span className="flex items-center gap-1">
                      <Badge variant="outline">{viewingTeacher.username}</Badge>
                    </span>
                    <span className="flex items-center gap-1">
                      <Calendar className="h-4 w-4" />
                      Hired {formatDate(viewingTeacher.hire_date)}
                    </span>
                    <Badge variant={getStatusBadgeVariant(viewingTeacher.status)}>
                      {formatStatusForDisplay(viewingTeacher.status)}
                    </Badge>
                  </div>
                </div>
              </div>

              {/* Contact Information */}
              <div className="grid gap-6 md:grid-cols-2">
                <Card>
                  <CardHeader>
                    <CardTitle className="text-lg flex items-center gap-2">
                      <Phone className="h-5 w-5" />
                      Contact Information
                    </CardTitle>
                  </CardHeader>
                  <CardContent className="space-y-4">
                    <div>
                      <Label className="text-sm font-medium text-gray-600">Email</Label>
                      <p className="flex items-center gap-2">
                        <Mail className="h-4 w-4 text-gray-400" />
                        {viewingTeacher.email || "Not provided"}
                      </p>
                    </div>
                    <div>
                      <Label className="text-sm font-medium text-gray-600">Phone</Label>
                      <p className="flex items-center gap-2">
                        <Phone className="h-4 w-4 text-gray-400" />
                        {viewingTeacher.phone || "Not provided"}
                      </p>
                    </div>
                    <div>
                      <Label className="text-sm font-medium text-gray-600">Address</Label>
                      <p className="flex items-start gap-2">
                        <MapPin className="h-4 w-4 text-gray-400 mt-0.5" />
                        <span className="text-sm">{viewingTeacher.address || "Not provided"}</span>
                      </p>
                    </div>
                  </CardContent>
                </Card>

                <Card>
                  <CardHeader>
                    <CardTitle className="text-lg">Emergency Contact</CardTitle>
                  </CardHeader>
                  <CardContent className="space-y-4">
                    <div>
                      <Label className="text-sm font-medium text-gray-600">Contact Person</Label>
                      <p>{viewingTeacher.emergency_contact || "Not provided"}</p>
                    </div>
                    <div>
                      <Label className="text-sm font-medium text-gray-600">Phone</Label>
                      <p className="flex items-center gap-2">
                        <Phone className="h-4 w-4 text-gray-400" />
                        {viewingTeacher.emergency_phone || "Not provided"}
                      </p>
                    </div>
                  </CardContent>
                </Card>
              </div>

              {/* Professional Information */}
              <Card>
                <CardHeader>
                  <CardTitle className="text-lg">Professional Information</CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="grid gap-6 md:grid-cols-3">
                    <div>
                      <Label className="text-sm font-medium text-gray-600">Department</Label>
                      <p className="font-medium">{viewingTeacher.department}</p>
                    </div>
                    <div>
                      <Label className="text-sm font-medium text-gray-600">Employment Type</Label>
                      <p>{viewingTeacher.employment_type}</p>
                    </div>
                    <div>
                      <Label className="text-sm font-medium text-gray-600">Experience</Label>
                      <p>{viewingTeacher.experience}</p>
                    </div>
                    <div>
                      <Label className="text-sm font-medium text-gray-600">Salary</Label>
                      <p className="font-medium">{viewingTeacher.salary || "Not specified"}</p>
                    </div>
                    <div>
                      <Label className="text-sm font-medium text-gray-600">Date of Birth</Label>
                      <p>{formatDate(viewingTeacher.date_of_birth || "")}</p>
                    </div>
                    <div>
                      <Label className="text-sm font-medium text-gray-600">Gender</Label>
                      <p>{viewingTeacher.gender || "Not specified"}</p>
                    </div>
                  </div>
                </CardContent>
              </Card>

              {/* Subjects */}
              <Card>
                <CardHeader>
                  <CardTitle className="text-lg">Subjects</CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="flex flex-wrap gap-2">
                    {getSubjectNames(Array.isArray(viewingTeacher.subjects) ? viewingTeacher.subjects.map(Number) : [])
                      .length > 0 ? (
                      getSubjectNames(
                        Array.isArray(viewingTeacher.subjects) ? viewingTeacher.subjects.map(Number) : [],
                      ).map((subjectName, index) => (
                        <Badge key={index} variant="secondary">
                          {subjectName}
                        </Badge>
                      ))
                    ) : (
                      <p className="text-gray-500">No subjects assigned</p>
                    )}
                  </div>
                </CardContent>
              </Card>

              {/* Account Information */}
              <Card>
                <CardHeader>
                  <CardTitle className="text-lg">Account Information</CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="grid gap-4 md:grid-cols-2">
                    <div>
                      <Label className="text-sm font-medium text-gray-600">Employee ID</Label>
                      <p className="font-mono bg-blue-100 px-2 py-1 rounded text-sm">{viewingTeacher.employee_id}</p>
                    </div>
                    <div>
                      <Label className="text-sm font-medium text-gray-600">Username</Label>
                      <p className="font-mono bg-gray-100 px-2 py-1 rounded text-sm">{viewingTeacher.username}</p>
                    </div>
                    <div>
                      <Label className="text-sm font-medium text-gray-600">Account Created</Label>
                      <p>{formatDate(viewingTeacher.created_at)}</p>
                    </div>
                  </div>
                </CardContent>
              </Card>
            </div>
          )}
        </DialogContent>
      </Dialog>
    </div>
  )
}
